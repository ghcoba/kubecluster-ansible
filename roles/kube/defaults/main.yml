---

#######################################################################################################
# tmp backup directory variables
# tmp backup directory position: (ansible deploy dir kubecluster-ansible/) ./tmp/


# ansible deploy tmp directory to store downloaded and generated data
ansible_deploy_tmp_dir: tmp

ansible_tmp_master_ca_backup_dir: "{{ ansible_deploy_tmp_dir }}/master_ca_backup"
ansible_tmp_etcd_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/etcd_certs_backup"
ansible_tmp_kube_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/kube_certs_backup"
# each kubelet has its own specific cert for every work nodes, backup stored in sub dir of node4, ..
ansible_tmp_kubelet_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/kubelet_certs_backup"
ansible_tmp_kube_proxy_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/kube_proxy_certs_backup"

# ansible tmp storage for kube utility binary
ansible_tmp_kube_bin_backup_dir: "{{ ansible_deploy_tmp_dir }}/kube_bin"

# tmp ca and cert config directory to generate and store ca/cert data: master ca, etcd cert, kube cert 
tmp_master_ca_config_dir: "/etc/tmp_master_ca_config"
tmp_etcd_certs_config_dir: "/etc/tmp_etcd_certs_config"
tmp_kube_certs_config_dir: "/etc/tmp_kube_certs_config"
# as kubelet nodes have specific cert for each work node, tmp config directory is created at each node,
# other tmp config dir is created at first node of cluster masters node
tmp_kubelet_certs_config_dir: "/etc/tmp_kubelet_certs_config"
tmp_kube_proxy_certs_config_dir: "/etc/tmp_kube_proxy_certs_config"


# group for tmp cert config directory
tmp_cert_config_group: root

########################################################################################################
# etcd variables


# etcd version and download url
etcd_version: 3.3.9

etcd_download_url_base: "https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version}}"
etcd_release: "etcd-v{{ etcd_version }}-linux-amd64" 
etcd_download_url: "{{ etcd_download_url_base }}/{{ etcd_release}}.tar.gz"

# etcd binary, data, config, certs directory definition
etcd_bin_path: /usr/local/bin
etcd_data_dir: /var/lib/etcd
etcd_conf_dir: /etc/etcd
etcd_certs_dir: "{{ etcd_conf_dir }}/ssl"

# etcd certo group
etcd_cert_group: etcd

# rem: we use master ca as ca for both kube and etcd

# etcd ca filename definition 
etcd_ca_filename: "etcd-ca.pem"
etcd_ca_key_filename: "etcd-ca-key.pem"
etcd_ca_config_json_filename: "etcd-ca-config.json"
etcd_ca_csr_json_filename: "etcd-ca-csr.json"
etcd_ca_csr_filename: "etcd-ca.csr"

etcd_ca_file: "{{ etcd_certs_dir }}/etcd-ca.pem"
etcd_ca_key_file: "{{ etcd_certs_dir }}/etcd-ca-key.pem"

# etcd server cert (etcd server service)
etcd_server_cert_filename: "etcd-server.pem"
etcd_server_key_filename: "etcd-server-key.pem"

etcd_server_json_filename: "etcd-server.json"
etcd_server_csr_filename: "etcd-server.csr"

etcd_server_cert_file: "{{ etcd_certs_dir }}/etcd-server.pem"
etcd_server_key_file: "{{ etcd_certs_dir }}/etcd-server-key.pem"

# etcd peer cert (peer communication)
etcd_peer_ca_filename: "etcd-ca.pem"
etcd_peer_cert_filename: "etcd-peer.pem"
etcd_peer_key_filename: "etcd-peer-key.pem"
etcd_peer_json_filename: "etcd-peer.json"
etcd_peer_csr_filename: "etcd-peer.csr"

etcd_peer_ca_file: "{{ etcd_certs_dir }}/etcd-ca.pem"
etcd_peer_cert_file: "{{ etcd_certs_dir }}/etcd-peer.pem"
etcd_peer_key_file: "{{ etcd_certs_dir }}/etcd-peer-key.pem"

# etcd client cert (used for etcdctl client and kube apiserver as client to access etcd server)
etcd_client_cert_filename: "etcd-client.pem"
etcd_client_key_filename: "etcd-client-key.pem"
etcd_client_json_filename: "etcd-client.json"
etcd_client_csr_filename: "etcd-client.csr"

etcd_client_cert_file: "{{ etcd_certs_dir }}/etcd-client.pem"
etcd_client_key_file: "{{ etcd_certs_dir }}/etcd-client-key.pem"


# client, peer cert authentication option
etcd_client_cert_auth: "true"
etcd_peer_client_cert_auth: "true"

# etcd client and peer port for communication
etcd_client_port: 2379
etcd_peer_port: 2380

######################### etcd initial cluster state. 
# ############  ATTENTION:  TAKE CARE SETTING WHEN CLUSTER UNHEALTHY AND NEED MAINTAINACE
etcd_initial_cluster_state: new

# etcd initial cluster token
etcd_initial_cluster_token: etcd-k8s-cluster

# etcd cluster urls
etcd_initial_advertise_peer_urls: "https://{{ etcd_machine_address }}:{{ etcd_peer_port }}"
etcd_listen_peer_urls: "https://{{ etcd_machine_address }}:{{ etcd_peer_port }}"
etcd_advertise_client_urls: "https://{{ etcd_machine_address }}:{{ etcd_client_port }}"
etcd_listen_client_urls: "https://{{ etcd_machine_address }}:2379,https://127.0.0.1:2379"

########################################################################################
# kubernetes binary variables

# kubernetes release binary download url is: https://dl.k8s.io/v1.11.0/kubernetes-server-linux-amd64.tar.gz
# other versions : 
#   https://dl.k8s.io/v1.11.3/kubernetes-server-linux-amd64.tar.gz

# etcd version and download url
kube_version: 1.11.3

kube_download_url_base: " https://dl.k8s.io/v{{ kube_version}}"
kube_release: "kubernetes"
kube_package_name: "kubernetes-server-linux-amd64"
kube_download_url: "{{ kube_download_url_base }}/{{ kube_package_name }}.tar.gz"

# kube binary, data, config, certs directory definition
kube_bin_path: /usr/local/bin

###########################################################################################
# variables for kubernetes

# kube username, group, home_dir, data_dir
kube_user: kube
kube_group: kube

kube_home_dir: "$HOME/.kube"
kube_data_dir: "/var/lib/kube"
kube_log_dir: "/var/log/kubernetes"

# kube config directory
kube_conf_dir: "/etc/kubernetes"
# kube cert directory
kube_certs_dir: "{{ kube_conf_dir }}/pki"

# variable: kube cert group
#kube_cert_group: root
kube_cert_group: kube

# rem: we use master ca for both kube and etcd

# kube ca files
kube_ca_filename: "ca.pem"
kube_ca_key_filename:  "ca-key.pem"

kube_ca_file: "{{ kube_certs_dir }}/ca.pem"
kube_ca_key_file:  "{{ kube_certs_dir }}/ca-key.pem"
kube_ca_config_json_filename: "ca-config.json"
kube_ca_csr_json_filename:    "ca-csr.json"
kube_ca_csr_filename:         "ca.csr"

# kube apiserver certs
kube_apiserver_cert_filename: "apiserver.pem"
kube_apiserver_key_filename:  "apiserver-key.pem"

kube_apiserver_cert_file: "{{ kube_certs_dir }}/apiserver.pem"
kube_apiserver_key_file:  "{{ kube_certs_dir }}/apiserver-key.pem"
kube_apiserver_json_filename: "apiserver.json"
kube_apiserver_csr_filename:      "apiserver.csr"

# kube admin user certs
kube_admin_cert_filename: "admin.pem"
kube_admin_key_filename:  "admin-key.pem"

kube_admin_cert_file: "{{ kube_certs_dir }}/admin.pem"
kube_admin_key_file:  "{{ kube_certs_dir }}/admin-key.pem"
kube_admin_json_filename: "admin.json"
kube_admin_csr_filename:      "admin.csr"

# kube controller-manager certs
kube_controller_manager_cert_filename: "controller-manager.pem"
kube_controller_manager_key_filename:  "controller-manager-key.pem"

kube_controller_manager_cert_file: "{{ kube_certs_dir }}/controller-manager.pem"
kube_controller_manager_key_file:  "{{ kube_certs_dir }}/controller-manager-key.pem"
kube_controller_manager_json_filename: "controller-manager.json"
kube_controller_manager_csr_filename:      "controller-manager.csr"

# kube scheduler certs
kube_scheduler_cert_filename: "scheduler.pem"
kube_scheduler_key_filename:  "scheduler-key.pem"

kube_scheduler_cert_file: "{{ kube_certs_dir }}/scheduler.pem"
kube_scheduler_key_file:  "{{ kube_certs_dir }}/scheduler-key.pem"
kube_scheduler_json_filename: "scheduler.json"
kube_scheduler_csr_filename:      "scheduler.csr"

# ip address and network for apiserver service cluster
# rem: apiserver_service_cluster_ip is the first ip of service cluster network
#      the first ip address is 10.96.0.1, and the network is 10.96.0.0/12
apiserver_service_cluster_ip: "10.96.0.1"
apiserver_service_cluster_ip_range: "10.96.0.0/12"


#########################################################################################
# kubelet variables

# kubelet binary, data, config, certs directory definition
kubelet_bin_path: /usr/local/bin
kubelet_data_dir: /var/lib/kubelet

pod_manifest_path: "{{ kube_conf_dir }}/manifests"

kubelet_conf_dir: "{{ kube_conf_dir }}/kubelet"
kubelet_certs_dir: "{{ kube_conf_dir }}/pki"

#kubelet_user: root
kubelet_user: kubelet
#kubelet_group: root
kubelet_group: kubelet

#kubelet_cert_group: root
kubelet_cert_group: kubelet

# kubelet certs
kube_kubelet_cert_filename: "kubelet.pem"
kube_kubelet_key_filename:  "kubelet-key.pem"

kube_kubelet_cert_file: "{{ kubelet_certs_dir }}/kubelet.pem"
kube_kubelet_key_file:  "{{ kubelet_certs_dir }}/kubelet-key.pem"
kube_kubelet_json_filename: "kubelet.json"
kube_kubelet_csr_filename:  "kubelet.csr"


#########################################################################################
# kube-proxy variables

# kube-proxy binary, data, config, certs directory definition
kube_proxy_bin_path: /usr/local/bin
kube_proxy_data_dir: /var/lib/kube-proxy

kube_proxy_conf_dir: "{{ kube_conf_dir }}/kube-proxy"
kube_proxy_certs_dir: "{{ kube_conf_dir }}/pki"

#kube_proxy_user: root
kube_proxy_user: kube-proxy
#kube_proxy_group: root
kube_proxy_group: kube-proxy

#kube_proxy_cert_group: root
kube_proxy_cert_group: kube-proxy

# kube-proxy certs
kube_kube_proxy_cert_filename: "kube-proxy.pem"
kube_kube_proxy_key_filename:  "kube-proxy-key.pem"

kube_kube_proxy_cert_file: "{{ kube_proxy_certs_dir }}/kube-proxy.pem"
kube_kube_proxy_key_file:  "{{ kube_proxy_certs_dir }}/kube-proxy-key.pem"
kube_kube_proxy_json_filename: "kube-proxy.json"
kube_kube_proxy_csr_filename:  "kube-proxy.csr"

######################################################################################
# variables for kube systemd service file generation of apiserver, controller-manager,
#   scheduler services

############################
#### common
kube_bin_dir: "{{ kube_bin_path }}"
# kube_log_dir:

#kube_ca_file: "{{ kube_certs_dir }}/ca.pem"
#kube_ca_key_file:  "{{ kube_certs_dir }}/ca-key.pem"
kube_ca_cert_file: "{{ kube_ca_file }}"
#kube_ca_key_file:        #(already defined)

############################
####  refered in apiserver

# #kube_masters_machina_address for apiserver advertis and bin address
# ATTENTION: now use load balance ip as --advertise-address and --bind-address
# it will be defined in template file using macro
#kube_masters_machina_address: 192.168.100.101
#kube_masters_machina_address: 192.168.100.109
#kube_masters_machina_address: "{% for host in groups['load-balancer'] %}{{ hostvars[host]['load_balancer_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"

# apiserver cert files
# ref (already defined previously):
#kube_apiserver_cert_file: "{{ kube_certs_dir }}/apiserver.pem"
#kube_apiserver_key_file:  "{{ kube_certs_dir }}/apiserver-key.pem"

#kube_apiserver_cert_file:
#kube_apiserver_key_file:

### ETCD server and client cert files for accessing etcd server
# etcd servers list: https://192.168.100.101:2379,https://192.....
# ATTENTION: we define it in template using macro
#kube_etcd_servers:

# ref (already defined previously):
#etcd_ca_file: "{{ etcd_certs_dir }}/etcd-ca.pem"
#etcd_ca_key_file: "{{ etcd_certs_dir }}/etcd-ca-key.pem"
#etcd_server_cert_file: "{{ etcd_certs_dir }}/etcd-server.pem"
#etcd_server_key_file: "{{ etcd_certs_dir }}/etcd-server-key.pem"
#etcd_client_cert_file: "{{ etcd_certs_dir }}/etcd-client.pem"
#etcd_client_key_file: "{{ etcd_certs_dir }}/etcd-client-key.pem"

# we use etcd client key to access etcd server
kube_etcd_ca_file: "{{ etcd_ca_file }}"
kube_etcd_cert_file: "{{ etcd_client_cert_file }}"
kube_etcd_key_file: "{{ etcd_client_key_file }}"

##############################################
#### refered in controller-manager
# ATTENTION: we defined this in template using inline macro script to apiserver load-balancer ip address
#kube_apiserver_lb_address: 192.168.100.101
#kube_apiserver_lb_address: 192.168.100.109
#kube_apiserver_lb_address: "{% for host in groups['load-balancer'] %}{{ hostvars[host]['load_balancer_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"

# config file
kube_controller_manager_kubeconfig_file: "{{ kube_conf_dir }}/ontroller-manager.conf"

# cert file
#kube_ca_cert_file:   # ca.pem, already defined
#kube_ca_key_file:   # ca-key.pem, already defined

#############################################
#### refered in scheduler-manger

# we use script in template to generate kube_apiserver_lb_address (load balance server)

# config file
kube_scheduler_kubeconfig_file: "{{ kube_conf_dir }}/scheduler.conf"

# cert file
#kube_ca_cert_file:   # ca.pem, already defined
#kube_ca_key_file:   # ca-key.pem, already defined

