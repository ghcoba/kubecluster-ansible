---

###############################################################################################
# system network configuration
#
# ansible deploy machine: node0, ip: 192.168.100.100
#
# cluster:  
#    1. kube-masters (node1 - node3, ip: 192.168.100.101-103)
#    2. kube-nodes (node3 - node6, ip: 192.168.100.104-106)
#
# load balancer (in front of apiserver) : lb-node, ip: 192.168.100.99 (virtual ip )
#
# kubernet service cluster (virtual) - network 10.96.0.0/12
#    cluster DNS server - 10.96.0.10
#   
# cluster network cidr: network 10.244.0.0/16
# flannel network: same as cluster cidr (network 10.244.0.0/16)
# flannel network for each host is network 10.44.x.0/24
# rem: flannel network interface: flannel_iface - ens32      
#

#
# ############################################################################################
# servic installed
#
# kube-masters:
#    1. HA proxy (in front of apiserver): on each node. only one active controlled by keepalived
#    2. keepalived: on each node. controls HA
#    3. etcd: on each service. total node number = 1, 3, 5, 7
#    4. cni network add-on: (worked as kubenet add-on) on each node of (kube-masters and kube-nodes) 
#          worked as kubernetes add-on
#    5. flannel network: on each node of cluster (masters, nodes). now using in kube-nodes only
#       (not using docker and not deploy pod on kube-masters now)
#    6. docker: on each node(masters, nodes). not active on kube-masters.
#       (not using docker and not deploy pod on kube-masters now) 
#    7. kube-apiserver: on each kube-masters nodes. active on every master nodes
#    8. kube-controller-manager: on each kube-masters nodes. elect only one to active
#    9. kube-scheduler: on each kube-masters nodes. elect only one to active
#
# kube-nodes:
#    1. kubelet: on each kube-nodes
#    2. kube-proxy: on each kube-nodes
#    3. cni network add-on: on each kube-nodes (also deployed on kube-masters) 
#          worked as kubernetes add-on
#    4. flannel network: on each kube-nodes (also deployed on kube-masters)
#    5. kube-dns add-on: on each kube-nodes
#          workded as kubernetes add-on
# 


###############################################################################################
# tmp backup directory variables
# tmp backup directory position: (ansible deploy dir kubecluster-ansible/) ./tmp/

# ansible deploy tmp directory to store downloaded and generated data
ansible_deploy_tmp_dir: tmp

ansible_tmp_master_ca_backup_dir: "{{ ansible_deploy_tmp_dir }}/master_ca_backup"
ansible_tmp_etcd_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/etcd_certs_backup"
ansible_tmp_kube_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/kube_certs_backup"
# each kubelet has its own specific cert for every work nodes, backup stored in sub dir of node4, ..
ansible_tmp_kubelet_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/kubelet_certs_backup"
ansible_tmp_kube_proxy_certs_backup_dir: "{{ ansible_deploy_tmp_dir }}/kube_proxy_certs_backup"

# ansible tmp storage for kube utility binary
ansible_tmp_kube_bin_backup_dir: "{{ ansible_deploy_tmp_dir }}/kube_bin"

# tmp ca and cert config directory to generate and store ca/cert data: master ca, etcd cert, kube cert 
# on first mode of kube-masters
tmp_master_ca_config_dir: "/etc/tmp_master_ca_config"
tmp_etcd_certs_config_dir: "/etc/tmp_etcd_certs_config"
tmp_kube_certs_config_dir: "/etc/tmp_kube_certs_config"

# as kubelet nodes have specific cert for each work node, tmp config directory is created at each node,
# other tmp config dir is created at first node of cluster masters node
# on all nodes of kube-nodes
tmp_kubelet_certs_config_dir: "/etc/tmp_kubelet_certs_config"
# on first node of kube-nodes
tmp_kube_proxy_certs_config_dir: "/etc/tmp_kube_proxy_certs_config"

# storage dir on deploy playbook tmp/(storage_dir) for using local binary and using local packege
ansible_tmp_kube_bin_local_dir: "{{ ansible_deploy_tmp_dir}}/kube_bin_local"
ansible_tmp_kube_package_local_dir: "{{ ansible_deploy_tmp_dir}}/kube_package_local"
ansible_tmp_cfssl_bin_local_dir: "{{ ansible_deploy_tmp_dir}}/cfssl_bin_local"
ansible_tmp_etcd_package_local_dir: "{{ ansible_deploy_tmp_dir}}/etcd_package_local"
ansible_tmp_etcd_bin_local_dir: "{{ ansible_deploy_tmp_dir}}/etcd_bin_local"
ansible_tmp_docker_package_local_dir: "{{ ansible_deploy_tmp_dir}}/docker_package_local"
ansible_tmp_flannel_package_local_dir: "{{ ansible_deploy_tmp_dir}}/flannel_package_local"
ansible_tmp_flannel_bin_local_dir: "{{ ansible_deploy_tmp_dir}}/flannel_bin_local"
ansible_tmp_cni_package_local_dir: "{{ ansible_deploy_tmp_dir}}/cni_package_local"
ansible_tmp_cni_bin_local_dir: "{{ ansible_deploy_tmp_dir}}/cni_bin_local"

# define if deployment will use local binary and package ( not using network downloading )
ansible_use_local_package: true

# group for tmp cert config directory
tmp_cert_config_group: root

# ansible tmp directory for kube config file, controller-manager config file and scheduler config file
ansible_tmp_kube_configs_dir: "{{ ansible_deploy_tmp_dir }}/kube_configs"


########################################################################################################
# etcd variables


# etcd version and download url
#etcd_version: 3.3.9
etcd_version: 3.1.15
# https://github.com/etcd-io/etcd/releases/download/v3.1.15/etcd-v3.1.15-linux-amd64.tar.gz

etcd_download_url_base: "https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version}}"
etcd_release: "etcd-v{{ etcd_version }}-linux-amd64" 
etcd_download_url: "{{ etcd_download_url_base }}/{{ etcd_release}}.tar.gz"

# etcd binary, data, config, certs directory definition
etcd_bin_path: /usr/local/bin
etcd_data_dir: /var/lib/etcd
etcd_conf_dir: /etc/etcd
etcd_certs_dir: "{{ etcd_conf_dir }}/ssl"

# etcd certo group
etcd_cert_group: etcd

etcd_user: etcd
etcd_group: etcd

# rem: we use master ca as ca for both kube and etcd

# etcd ca filename definition 
etcd_ca_filename: "etcd-ca.pem"
etcd_ca_key_filename: "etcd-ca-key.pem"
etcd_ca_config_json_filename: "etcd-ca-config.json"
etcd_ca_csr_json_filename: "etcd-ca-csr.json"
etcd_ca_csr_filename: "etcd-ca.csr"

etcd_ca_file: "{{ etcd_certs_dir }}/etcd-ca.pem"
etcd_ca_key_file: "{{ etcd_certs_dir }}/etcd-ca-key.pem"

# etcd server cert (etcd server service)
etcd_server_cert_filename: "etcd-server.pem"
etcd_server_key_filename: "etcd-server-key.pem"

etcd_server_json_filename: "etcd-server.json"
etcd_server_csr_filename: "etcd-server.csr"

etcd_server_cert_file: "{{ etcd_certs_dir }}/etcd-server.pem"
etcd_server_key_file: "{{ etcd_certs_dir }}/etcd-server-key.pem"

# etcd peer cert (peer communication)
etcd_peer_ca_filename: "etcd-ca.pem"
etcd_peer_cert_filename: "etcd-peer.pem"
etcd_peer_key_filename: "etcd-peer-key.pem"
etcd_peer_json_filename: "etcd-peer.json"
etcd_peer_csr_filename: "etcd-peer.csr"

etcd_peer_ca_file: "{{ etcd_certs_dir }}/etcd-ca.pem"
etcd_peer_cert_file: "{{ etcd_certs_dir }}/etcd-peer.pem"
etcd_peer_key_file: "{{ etcd_certs_dir }}/etcd-peer-key.pem"

# etcd client cert (used for etcdctl client and kube apiserver as client to access etcd server)
etcd_client_cert_filename: "etcd-client.pem"
etcd_client_key_filename: "etcd-client-key.pem"
etcd_client_json_filename: "etcd-client.json"
etcd_client_csr_filename: "etcd-client.csr"

etcd_client_cert_file: "{{ etcd_certs_dir }}/etcd-client.pem"
etcd_client_key_file: "{{ etcd_certs_dir }}/etcd-client-key.pem"


# client, peer cert authentication option
etcd_client_cert_auth: "true"
etcd_peer_client_cert_auth: "true"

# etcd client and peer port for communication
etcd_client_port: 2379
etcd_peer_port: 2380

######################### etcd initial cluster state. 
# ############  ATTENTION:  TAKE CARE SETTING WHEN CLUSTER UNHEALTHY AND NEED MAINTAINACE
etcd_initial_cluster_state: new

# etcd initial cluster token
etcd_initial_cluster_token: etcd-k8s-cluster

# etcd cluster urls
etcd_initial_advertise_peer_urls: "https://{{ etcd_machine_address }}:{{ etcd_peer_port }}"
etcd_listen_peer_urls: "https://{{ etcd_machine_address }}:{{ etcd_peer_port }}"
etcd_advertise_client_urls: "https://{{ etcd_machine_address }}:{{ etcd_client_port }}"
etcd_listen_client_urls: "https://{{ etcd_machine_address }}:2379,https://127.0.0.1:2379"

########################################################################################
# kubernetes binary variables

# kubernetes release binary download url is: https://dl.k8s.io/v1.11.0/kubernetes-server-linux-amd64.tar.gz
# other versions : 
#   https://dl.k8s.io/v1.11.3/kubernetes-server-linux-amd64.tar.gz

# etcd version and download url
kube_version: 1.11.3

kube_download_url_base: " https://dl.k8s.io/v{{ kube_version}}"
kube_release: "kubernetes"
kube_package_name: "kubernetes-server-linux-amd64"
kube_download_url: "{{ kube_download_url_base }}/{{ kube_package_name }}.tar.gz"

# kube binary, data, config, certs directory definition
kube_bin_path: /usr/local/bin

###########################################################################################
# variables for kubernetes

# kube username, group, home_dir, data_dir
kube_user: kube
kube_group: kube

kube_home_dir: "$HOME/.kube"
kube_data_dir: "/var/lib/kube"
kube_log_dir: "/var/log/kubernetes"

# kube config directory
kube_conf_dir: "/etc/kubernetes"
kube_config_dir: "/etc/kubernetes"
# kube cert directory
kube_certs_dir: "{{ kube_conf_dir }}/pki"

# variable: kube cert group
#kube_cert_group: root
kube_cert_group: kube

# rem: we use master ca for both kube and etcd

# kube ca files
kube_ca_filename: "ca.pem"
kube_ca_key_filename:  "ca-key.pem"

kube_ca_file: "{{ kube_certs_dir }}/ca.pem"
kube_ca_key_file:  "{{ kube_certs_dir }}/ca-key.pem"
kube_ca_config_json_filename: "ca-config.json"
kube_ca_csr_json_filename:    "ca-csr.json"
kube_ca_csr_filename:         "ca.csr"

# kube apiserver certs
kube_apiserver_cert_filename: "apiserver.pem"
kube_apiserver_key_filename:  "apiserver-key.pem"

kube_apiserver_cert_file: "{{ kube_certs_dir }}/apiserver.pem"
kube_apiserver_key_file:  "{{ kube_certs_dir }}/apiserver-key.pem"
kube_apiserver_json_filename: "apiserver.json"
kube_apiserver_csr_filename:      "apiserver.csr"

# kube admin user certs
kube_admin_cert_filename: "admin.pem"
kube_admin_key_filename:  "admin-key.pem"

kube_admin_cert_file: "{{ kube_certs_dir }}/admin.pem"
kube_admin_key_file:  "{{ kube_certs_dir }}/admin-key.pem"
kube_admin_json_filename: "admin.json"
kube_admin_csr_filename:      "admin.csr"

# kube controller-manager certs
kube_controller_manager_cert_filename: "controller-manager.pem"
kube_controller_manager_key_filename:  "controller-manager-key.pem"

kube_controller_manager_cert_file: "{{ kube_certs_dir }}/controller-manager.pem"
kube_controller_manager_key_file:  "{{ kube_certs_dir }}/controller-manager-key.pem"
kube_controller_manager_json_filename: "controller-manager.json"
kube_controller_manager_csr_filename:      "controller-manager.csr"

# kube scheduler certs
kube_scheduler_cert_filename: "scheduler.pem"
kube_scheduler_key_filename:  "scheduler-key.pem"

kube_scheduler_cert_file: "{{ kube_certs_dir }}/scheduler.pem"
kube_scheduler_key_file:  "{{ kube_certs_dir }}/scheduler-key.pem"
kube_scheduler_json_filename: "scheduler.json"
kube_scheduler_csr_filename:      "scheduler.csr"

# ip address and network for apiserver service cluster
# rem: apiserver_service_cluster_ip is the first ip of service cluster network
#      the first ip address is 10.96.0.1, and the network is 10.96.0.0/12
apiserver_service_cluster_ip: "10.96.0.1"
apiserver_service_cluster_ip_range: "10.96.0.0/12"
cluster_network_cidr: "10.244.0.0/16"

#########################################################################################
# kubelet variables

# kubelet binary, data, config, certs directory definition
kubelet_bin_path: /usr/local/bin
kubelet_data_dir: /var/lib/kubelet

kube_pod_manifest_dir: "{{ kube_conf_dir }}/manifests"

kubelet_conf_dir: "{{ kube_conf_dir }}"
kubelet_kubeconfig_file: "{{ kubelet_conf_dir }}/kubelet.conf"
kubelet_certs_dir: "{{ kube_conf_dir }}/pki"

#kubelet_user: root
kubelet_user: kubelet
#kubelet_group: root
kubelet_group: kubelet

#kubelet_cert_group: root
kubelet_cert_group: kubelet

# kubelet certs
kube_kubelet_cert_filename: "kubelet.pem"
kube_kubelet_key_filename:  "kubelet-key.pem"

kube_kubelet_cert_file: "{{ kubelet_certs_dir }}/kubelet.pem"
kube_kubelet_key_file:  "{{ kubelet_certs_dir }}/kubelet-key.pem"
kube_kubelet_json_filename: "kubelet.json"
kube_kubelet_csr_filename:  "kubelet.csr"


#########################################################################################
# kube-proxy variables

# kube-proxy binary, data, config, certs directory definition
kube_proxy_bin_path: /usr/local/bin
kube_proxy_data_dir: /var/lib/kube-proxy

kube_proxy_conf_dir: "{{ kube_conf_dir }}/kube-proxy"
kube_proxy_certs_dir: "{{ kube_conf_dir }}/pki"

#kube_proxy_user: root
kube_proxy_user: kube-proxy
#kube_proxy_group: root
kube_proxy_group: kube-proxy

#kube_proxy_cert_group: root
kube_proxy_cert_group: kube-proxy

# kube-proxy certs
kube_kube_proxy_cert_filename: "kube-proxy.pem"
kube_kube_proxy_key_filename:  "kube-proxy-key.pem"

kube_kube_proxy_cert_file: "{{ kube_proxy_certs_dir }}/kube-proxy.pem"
kube_kube_proxy_key_file:  "{{ kube_proxy_certs_dir }}/kube-proxy-key.pem"
kube_kube_proxy_json_filename: "kube-proxy.json"
kube_kube_proxy_csr_filename:  "kube-proxy.csr"

######################################################################################
# variables for kube systemd service file generation of apiserver, controller-manager,
#   scheduler services

############################
#### common
kube_bin_dir: "{{ kube_bin_path }}"
# kube_log_dir:

#kube_ca_file: "{{ kube_certs_dir }}/ca.pem"
#kube_ca_key_file:  "{{ kube_certs_dir }}/ca-key.pem"
kube_ca_cert_file: "{{ kube_ca_file }}"
#kube_ca_key_file:        #(already defined)

############################
####  refered in apiserver

# #kube_masters_machina_address for apiserver advertis and bin address
# ATTENTION: now use load balance ip as --advertise-address and --bind-address
# it will be defined in template file using macro
#kube_masters_machina_address: 192.168.100.101
#kube_masters_machina_address: 192.168.100.109
#kube_masters_machina_address: "{% for host in groups['load-balancer'] %}{{ hostvars[host]['load_balancer_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"

# apiserver cert files
# ref (already defined previously):
#kube_apiserver_cert_file: "{{ kube_certs_dir }}/apiserver.pem"
#kube_apiserver_key_file:  "{{ kube_certs_dir }}/apiserver-key.pem"

#kube_apiserver_cert_file:
#kube_apiserver_key_file:

### ETCD server and client cert files for accessing etcd server
# etcd servers list: https://192.168.100.101:2379,https://192.....
# ATTENTION: we define it in template using macro
#kube_etcd_servers:

# ref (already defined previously):
#etcd_ca_file: "{{ etcd_certs_dir }}/etcd-ca.pem"
#etcd_ca_key_file: "{{ etcd_certs_dir }}/etcd-ca-key.pem"
#etcd_server_cert_file: "{{ etcd_certs_dir }}/etcd-server.pem"
#etcd_server_key_file: "{{ etcd_certs_dir }}/etcd-server-key.pem"
#etcd_client_cert_file: "{{ etcd_certs_dir }}/etcd-client.pem"
#etcd_client_key_file: "{{ etcd_certs_dir }}/etcd-client-key.pem"

# we use etcd client key to access etcd server
kube_etcd_ca_file: "{{ etcd_ca_file }}"
kube_etcd_cert_file: "{{ etcd_client_cert_file }}"
kube_etcd_key_file: "{{ etcd_client_key_file }}"

##############################################
#### refered in controller-manager
# ATTENTION: we defined this in template using inline macro script to apiserver load-balancer ip address
#kube_apiserver_lb_address: 192.168.100.101
#kube_apiserver_lb_address: 192.168.100.109
#kube_apiserver_lb_address: "{% for host in groups['load-balancer'] %}{{ hostvars[host]['load_balancer_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"

# config file
kube_controller_manager_kubeconfig_file: "{{ kube_conf_dir }}/controller-manager.conf"

# cert file
#kube_ca_cert_file:   # ca.pem, already defined
#kube_ca_key_file:   # ca-key.pem, already defined

#############################################
#### refered in scheduler-manger

# we use script in template to generate kube_apiserver_lb_address (load balance server)

# config file
kube_scheduler_kubeconfig_file: "{{ kube_conf_dir }}/scheduler.conf"

# cert file
#kube_ca_cert_file:   # ca.pem, already defined
#kube_ca_key_file:   # ca-key.pem, already defined

# ============================================================================================
# varibles for gen kube config

kube_apiserver_url: "https://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:6443"
kube_apiserver_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

kube_load_balancer_apiserver_url: "https://{{ hostvars['lb-node']['host_ip_address'] }}:5000"
kube_load_balancer_apiserver_ip: "{{ hostvars['lb-node']['host_ip_address'] }}"

arg_str_cluster: " config set-cluster kubernetes  --certificate-authority={{ kube_ca_file }} --embed-certs=true --server={{ kube_apiserver_url }} --kubeconfig=admin.conf"
arg_str_credentials: " config set-credentials kubernetes-admin --client-certificate={{ kube_admin_cert_file }} --embed-certs=true --client-key={{ kube_admin_key_file }} --kubeconfig=admin.conf"
arg_str_context: " config set-context kubernetes-admin@kubernetes --cluster=kubernetes --user=kubernetes-admin --kubeconfig=admin.conf"
arg_str_defaultcontext: " config use-context kubernetes-admin@kubernetes --kubeconfig=admin.conf"

arg_str_kube_config: "{{ arg_str_cluster }}{{ arg_str_credentials }}{{ arg_str_context }}{{ arg_str_defaultcontext }}"

# ============================================================================================
# varibles for gen kubelet config

kube_kubelet_load_balancer_apiserver_url: "https://{{ hostvars['lb-node']['host_ip_address'] }}:5000"
kube_kubelet_load_balancer_apiserver_ip: "{{ hostvars['lb-node']['host_ip_address'] }}"

arg_str_kubelet_cluster: " config set-cluster kubernetes  --certificate-authority={{ kube_ca_file }} --embed-certs=true --server={{ kube_kubelet_load_balancer_apiserver_url }} --kubeconfig=kubelet.conf"
arg_str_kubelet_credentials_1: " config set-credentials"
#arg_str_kubelet_credentials_2: " system:node:{{ hostvars[inventory_hostname] }}" 
arg_str_kubelet_credentials_3: "--client-certificate={{ kube_kubelet_cert_file }} --embed-certs=true --client-key={{ kube_kubelet_key_file }} --kubeconfig=kubelet.conf"
arg_str_kubelet_context_1: " config set-context"
#arg_str_kubelet_context_2: " system:node:{{ hostvars[inventory_hostname] }}@kubernetes"
arg_str_kubelet_context_3: " --cluster=kubernetes"
#arg_str_kubelet_context_4: " --user=system:node:{{  hostvars[inventory_hostname] }}"
arg_str_kubelet_context_5: " --kubeconfig=kubelet.conf"
arg_str_kubelet_defaultcontext_1: " config use-context"
#arg_str_kubelet_defaultcontext_2: " system:node:{{ hostvars[inventory_hostname] }}@kubernetes"
arg_str_kubelet_defaultcontext_3: " --kubeconfig=kubelet.conf"

arg_str_kubelet_kube_config: "{{ arg_str_kubelet_cluster }}{{ arg_str_kubelet_credentials }}{{ arg_str_kubelet_context }}{{ arg_str_kubeletdefaultcontext }}"

# ============================================================================================
# varibles for gen kube-proxy config

kube_kube_proxy_load_balancer_apiserver_url: "https://{{ hostvars['lb-node']['host_ip_address'] }}:5000"
kube_kube_proxy_load_balancer_apiserver_ip: "{{ hostvars['lb-node']['host_ip_address'] }}"

arg_str_kube_proxy_cluster: " config set-cluster kubernetes --certificate-authority={{ kube_ca_file }} --embed-certs=true --server={{ kube_kube_proxy_load_balancer_apiserver_url }} --kubeconfig=kube-proxy.conf"
arg_str_kube_proxy_credentials: " config set-credentials system:kube-proxy --client-certificate={{ kube_kube_proxy_cert_file }} --embed-certs=true --client-key={{ kube_kube_proxy_key_file }} --kubeconfig=kube-proxy.conf"
arg_str_kube_proxy_context: " config set-context system:kube-proxy@kubernetes --cluster=kubernetes --user=system:kube-proxy --kubeconfig=kube-proxy.conf"
arg_str_kube_proxy_defaultcontext: " config use-context system:kube-proxy@kubernetes --kubeconfig=kube-proxy.conf"

arg_str_kube_proxy_kube_config: "{{ arg_str_kube_proxy_cluster }}{{ arg_str_kube_proxy_credentials }}{{ arg_str_kube_proxy_context }}{{ arg_str_kube_proxydefaultcontext }}"

####################################################################################
# varibles for docker deploy

# docker version and download url

#docker_version: 18.03.1
# https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-18.03.1.ce-1.el7.centos.x86_64.rpm
#docker_download_url_base: "https://download.docker.com/linux/centos/7/x86_64/stable/Packages"
#docker_release: "docker-ce-{{ docker_version }}.ce-1.el7.centos.x86_64"
#docker_download_url: "{{ docker_download_url_base }}/{{ docker_release}}.rpm"

docker_version: 18.06.1.ce-3.el7
# https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-18.06.1.ce-3.el7.x86_64.rpm 

docker_download_url_base: "https://download.docker.com/linux/centos/7/x86_64/stable/Packages"
docker_release: "docker-ce-{{ docker_version }}.x86_64"
docker_download_url: "{{ docker_download_url_base }}/{{ docker_release }}.rpm"

# docker binary, data, config, certs directory definition
#docker_bin_path: /usr/local/bin
#docker_data_dir: /var/lib/docker
docker_config_dir: /etc/docker
docker_option_graph: /var/lib/docker

# docker cert group
#docker_cert_group: docker

#docker_user: docker
#docker_group: docker

#####################################################################################
# variables for cni deploy

cni_version: 0.5.2
# https://github.com/containernetworking/cni/releases/download/v0.5.2/cni-amd64-v0.5.2.tgz

kube_cni_download_url_base: "https://github.com/containernetworking/cni/releases/download/v{{ cni_version }}"
kube_cni_release: "cni-amd64-v{{ cni_version }}"
kube_cni_download_url: "{{ kube_cni_download_url_base }}/{{ kube_cni_release }}.tgz"

# on first node of kube-node
kube_cni_download_dir: /etc/cni_download

# cni binary, data, config, certs directory definition
kube_cni_bin_dir: /opt/cni/bin

#kube_cni_data_dir: /var/lib/cni
kube_cni_conf_dir: /etc/cni/net.d

# cni cert group
#cni_cert_group: kube

#cni_user: kube
#cni_group: kube


########################################################################################
# variables for flannel deploy

# package version and download url variables

# https://github.com/coreos/flannel/releases/download/v0.10.0/flannel-v0.10.0-linux-amd64.tar.gz
flannel_version: 0.10.0

flannel_download_url_base: "https://github.com/coreos/flannel/releases/download/v{{ flannel_version }}"
flannel_release: "flannel-v{{ flannel_version }}-linux-amd64"
flannel_download_url: "{{ flannel_download_url_base }}/{{ flannel_release }}.tar.gz"

# on first node of kube-node
flannel_download_dir: /etc/flannel_download

# flannel system variables

flannel_etcd_key: "/coreos.com/network"

flannel_network: "{{ cluster_network_cidr }}"

flannel_network_config_str: "{ Network: 10.244.0.0/16, SubnetLen: 24, Backend: { Type: vxlan, VNI: 1 } }"

flannel_bin_dir: "/usr/local/bin"
flannel_config_dir: "/etc/sysconfig"
flannel_config_file: "{{ flannel_config_dir }}/flanneld"
flannel_network_config_key_json_file: "{{ flannel_config_dir }}/flannel-config-vxlan.json"
flannel_docker_option_file: /run/flannel/docker
flannel_remove_docker0_script_file: remove-docker0.sh

flannel_subnetenv_file: "/run/flannel/subnet.env"

flannel_etcd_ca_file: "{{ etcd_ca_file }}"
flannel_etcd_client_cert_file: "{{ etcd_client_cert_file }}"
flannel_etcd_client_key_file: "{{ etcd_client_key_file }}"
flannel_iface: "ens32"

flannel_user: root
flannel_group: root
flannel_cert_group: root
 
