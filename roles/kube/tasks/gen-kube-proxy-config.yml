---

# file: roles/kube/tasks/gen-kube-proxy-config.yml
# generate kube-proxy config file (set cluster, credential, context, and default context)
# copy to ansible backup
# copy to kub home dire

# generate kube-proxy config file for every master node
- name: generate kublet config - set cluster
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config set-cluster kubernetes
#      --certificate-authority="{{ kube_ca_file }}" 
#      --embed-certs=true 
#      --server="{{ kube_kube_proxy_apiserver_url }}"
#      --kubeconfig=kube-proxy.conf
  command: "/usr/local/bin/kubectl {{ arg_str_kube_proxy_cluster }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-nodes']

- name: generate kube-proxy config - set credential
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config set-credentials system:kube-proxy 
#      --client-certificate="{{ kube_kube_proxy_cert_file }}"
#      --embed-certs=true 
#      --client-key="{{ kube_kube_proxy_key_file }}" 
#      --kubeconfig=kube-proxy.conf
  command: "/usr/local/bin/kubectl  {{ arg_str_kube_proxy_credentials }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-nodes']

- name: generate kube-proxy config - set context
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config set-context system:kube-proxy@kubernetes
#      --cluster=kubernetes
#      --user=system:kube-proxy
#      --kubeconfig=kube-proxy.conf
  command: "/usr/local/bin/kubectl  {{ arg_str_kube_proxy_context }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-nodes']

- name: generate kube-proxy config - set default context
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config use-context system:kube-proxy@kubernetes
#      --kubeconfig=kube-proxy.conf
  command: "/usr/local/bin/kubectl  {{ arg_str_kube_proxy_defaultcontext }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-nodes']

