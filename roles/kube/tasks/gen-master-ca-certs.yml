---

# generate master ca and certs on first master node (in directory of /etc/tmp_master_ca_config/), 
# and copy back to ansible as backup

# ATTENTION:
#   1. kube and etcd will use this ca cert as root ca cert
#   2. this task must executed before generating kube ca cert and generating etcd ca cert
#   3. this storage will be deleted after we have finished creation of kuber and etcd cert bu
#        calling post proceessing for cert generation
#

# remove tmp master ca config directory if exist
- name: remove tmp master ca config directory is exist
  file:
    path: "{{ tmp_master_ca_config_dir }}"
    state: absent

# create tmp master ca config directory  on first node of masters group
- name: create master ca config directory on first master node
  file:
    path: "{{ tmp_master_ca_config_dir }}"
    state: directory
    force: yes
    mode: 01777
    owner: root
    group: root
  register: tmp_master_ca_config_dir_exist_check
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"

# ensure tmp master ca config directory exist
#- fail: msg="{{ tmp_master_ca_config_dir }} not exist."
#  when: tmp_master_ca_config_dir_exist_check.stat.exists == False  
#  run_once: true
#  delegate_to: "{{ groups['kube-masters'][0] }}"

# copy make-master-ca-cert.sh to first master node
- name: copy make-master-ca-cert.sh
  copy:
    src: make-master-ca-cert.sh
    dest: "{{ tmp_master_ca_config_dir }}"
    owner: root
    group: root
    mode: "0500"
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"
  
  
# generate master ca cert on the first master node
- name: gen master ca certs on the first master server
  command:
    "{{ tmp_master_ca_config_dir }}/make-master-ca-cert.sh"
  args:
    creates: "{{ tmp_master_ca_config_dir }}/server.crt"
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"
  environment:
    NODE_IPS: "{% for host in groups['cluster'] %}{{ hostvars[host]['cluster_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
    NODE_DNS: "{{ groups['cluster']|join(',') }}"
    CERT_DIR: "{{ tmp_master_ca_config_dir }}"
    CERT_GROUP: "{{ tmp_cert_config_group }}"


# check tmp master ca config directory on first master node
- name: check master ca cert config dir exist
  stat:
    path="{{ tmp_master_ca_config_dir }}"
  register: tmp_master_ca_config_dir_check
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"


# fetch master ca cert from tmp master ca config directory on first master node 
#   and store to ansible tmp backup directory as backup for check
- name: fetch master ca cert files from the first etcd server to ansible tmp directory
  fetch:
    src: "{{ tmp_master_ca_config_dir }}/{{ item }}"
    dest: "{{ ansible_tmp_master_ca_backup_dir }}/{{ item }}"
    flat: yes
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"
  with_items:
    - "{{ kube_ca_filename }}"
    - "{{ kube_ca_key_filename }}"
    - "{{ kube_ca_config_json_filename }}"
    - "{{ kube_ca_csr_json_filename }}"
    - "{{ kube_ca_csr_filename }}"
    - cfssl
    - cfssljson
  when: tmp_master_ca_config_dir_check

