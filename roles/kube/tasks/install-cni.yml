---
    
- name: create cni download dir
  file: 
    path: "{{ kube_cni_download_dir }}"
    state: directory
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  run_once: true
  
- name: check whether cni downloaded on the first node
  stat: 
    path: "{{ kube_cni_download_dir }}/{{ kube_cni_release }}.tgz"
  register: kube_cni_downloaded_check
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  run_once: true

- debug:
    msg: " kube_cni_downloaded_check: {{ kube_cni_downloaded_check }}"
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  run_once: true
  
- name: download cni on the first node
  get_url:
    url: "{{ kube_cni_download_url }}"
    dest: "{{ kube_cni_download_dir }}"
    validate_certs: no
    timeout: 30
  register: download_cni
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  run_once: true
  when: 
    - not kube_cni_downloaded_check.stat.exists

- name: check whether cni tar extracted on the first node
  stat: 
    path: "{{ kube_cni_download_dir }}/cnitool"
  register: kube_cni_release_tar_check
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  run_once: true
  
- name: extract cni tar file
  unarchive:
    src: "{{ kube_cni_download_dir }}/{{ kube_cni_release }}.tgz"
    dest: "{{ kube_cni_download_dir }}"
    remote_src: yes
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  when: 
    - not kube_cni_release_tar_check.stat.exists

- name: fetch cni package from the first node
  fetch:
    src: "{{ kube_cni_download_dir }}/{{ kube_cni_release }}.tgz"
    dest: "{{ ansible_tmp_cni_package_local_dir }}/{{ kube_cni_release }}.tgz"
    flat: yes
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"

- name: fetch cni binary from the first node
  fetch:
    src: "{{ kube_cni_download_dir }}/{{ item }}"
    dest: "{{ ansible_tmp_cni_bin_local_dir }}/{{ item }}"
    flat: yes
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  with_items:
    - bridge
    - cnitool
    - dhcp
    - flannel
    - host-local
    - ipvlan
    - loopback
    - macvlan
    - noop
    - ptp
    - tuning

- name: remove cni download dir
  file:
    path: "{{ kube_cni_download_dir }}"
    state: absent
  delegate_to: "{{ groups['kube-nodes'][0] }}"
  run_once: true
  
- name: create cni bin and conf dir
  file: 
    path: "{{ item }}"
    state: directory
    owner: "{{ kube_user }}"
    group: "{{ kube_group }}"
    mode: 0751
    recurse: yes
  with_items:
    - "{{ kube_cni_conf_dir }}"
    - "{{ kube_cni_bin_dir }}"
#  when: inventory_hostname in groups['kube-nodes']

- name: copy cni binary
  copy:
    src: "{{ ansible_tmp_cni_bin_local_dir }}/{{ item }}"
    dest: "{{ kube_cni_bin_dir }}"
    owner: "{{ kube_user }}"
    group: "{{ kube_group }}"
    mode: 0751
  with_items:
    - bridge
    - cnitool
    - dhcp
    - flannel
    - host-local
    - ipvlan
    - loopback
    - macvlan
    - noop
    - ptp
    - tuning
#  when: inventory_hostname in groups['kube-nodes']
