---

# file: roles/kube/tasks/gen-kube-proxy-certs.yml
# . create tmp kube-proxy cert config directory for cert gen on first ndoe of kube-nodes
# . create kube-proxy cert directory on all all nodes of kube node
# . copy cert gen shell script to first node of kube-nodes
# . copy master ca cert to tmp config, run the gen shell script to gen cert)
# . copy certs generated into ansible tmp backup storeage
# . copy certs from ansible tmp storage to all work nodes of kube node 
#

# remove tmp kube-proxy cert config directory on first node of kube-nodes
- name: STARTING gen-kube-proxy-certs TASK. remove tmp kube certs config directory if exist on first work node
  file:
    path: "{{ tmp_kube_proxy_certs_config_dir }}"
    state: absent
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"

# create tmp config directory for kube-proxy cert on first work node
- name: create and ensure tmp kube-proxy certs config directory on first work node 
  file:
    path: "{{ tmp_kube_proxy_certs_config_dir }}"
    state: directory
    force: yes
    mode: 01777
    owner: root
    group: root
    recurse: yes
  register: tmp_kube_proxy_certs_config_dir_check
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"


# create kube-proxy cert dirctory on each work node
- name: ensure kube-proxy certs directory
  file:
    path: "{{ kube_proxy_certs_dir }}"
    state: directory
    force: yes
    owner: root
    group: root
    recurse: yes
  when: inventory_hostname in groups['kube-nodes']


# copy make kube-proxy cert script to tmp kube config directory of first node of kube-nodes
- name: copy make-kube-proxy-cert.sh to first ndot of kube-nodes
  copy:
    src: make-kube-proxy-cert.sh
    dest: "{{ tmp_kube_proxy_certs_config_dir }}"
    owner: root
    group: root
    mode: "0500"
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"


# copy kube master ca and cert files from ansible tmp backup directory to tmp config directory
- name: copy ansible tmp backup master certs to tmp config directory of first node of kube-nodes
  copy:
    dest: "{{ tmp_kube_proxy_certs_config_dir }}/{{ item }}"
    src:  "{{ ansible_tmp_master_ca_backup_dir }}/{{ item }}"
    owner: "{{ tmp_cert_config_group }}"
    group: "{{ tmp_cert_config_group }}"
  with_items:
    - "{{ kube_ca_filename }}"
    - "{{ kube_ca_key_filename }}"
    - "{{ kube_ca_config_json_filename }}"
    - "{{ kube_ca_csr_json_filename }}"
    - "{{ kube_ca_csr_filename }}" 
    - cfssl
    - cfssljson
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"


# run make script to create cert on tmp kube-proxy config directory
# (rem: script need copy master ca/ca-key from MASTER_CA_DIR to tmp kube-proxy cert config directory first,
#       as kube, etcd, kubelet, kube-proxy will use a common ca/ca-key to generate other certs)

# before exec:
#   1. make-kube-proxy-cert.sh copied to tmp config directory
#   2. master ca cert files copied to tmp config directory
#   3. cfssl and cfssljson utilities copied to tmp config directory
#   
#   4. NODE_NAME as env vairalbe set for creation of cert user name ("CN" zone)
#   5. CERT_DIR as env variable set for shell to copy generated cert to this storage
#   6. TMP_CERT_CONFIG_DIR as env variable set for shell to locate tmp work directory 

- name: gen kube-proxy certs on the first kube-nodes - certs generated is kube-proxy
  command:
    "{{ tmp_kube_proxy_certs_config_dir }}/make-kube-proxy-cert.sh"
  args:
    creates: "{{ tmp_kube_proxy_certs_config_dir }}/server.crt"
  environment:
    NODE_IPS: "{% for host in groups['kube-nodes'] %}{{ hostvars[host]['kube_nodes_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
#    NODE_NAME: inventory_hostname
    CERT_GROUP: "{{ kube_proxy_group }}"
    NODE_DNS: "{{ groups['kube-nodes']|join(',') }}"
    CERT_DIR: "{{ kube_proxy_certs_dir }}"    
    TMP_CERT_CONFIG_DIR: "{{ tmp_kube_proxy_certs_config_dir }}"
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"



# backup cert files from tmp kube-proxy cert config directory to ansible tmp cert backup directory
# (cert, csr and json files)
- name: fetch generated kube-proxy cert files from the work node to ansible tmp directory
  fetch:
    src: "{{ tmp_kube_proxy_certs_config_dir }}/{{ item }}"
    dest: "{{ ansible_tmp_kube_proxy_certs_backup_dir }}/{{ item }}"
    flat: yes
  with_items:
#    - "{{ kube_ca_filename }}"
#    - "{{ kube_ca_key_filename }}"
#    - "{{ kube_ca_config_json_filename }}"
#    - "{{ kube_ca_csr_json_filename }}"
#    - "{{ kube_ca_csr_filename }}"
    - "{{ kube_kube_proxy_cert_filename }}"
    - "{{ kube_kube_proxy_key_filename }}"
    - "{{ kube_kube_proxy_json_filename }}"
    - "{{ kube_kube_proxy_csr_filename }}"
  run_once: true
  delegate_to: "{{ groups['kube-nodes'][0] }}"


# copy master ca file from ansible tmp backup directory to all work node of kube-nodes
- name: copy master ca file from ansible tmp backup to work node
  copy:
    dest: "{{ kube_proxy_certs_dir }}/{{ item }}"
    src:  "{{ ansible_tmp_master_ca_backup_dir }}/{{ item }}"
    owner: "{{ kube_proxy_cert_group }}"
    group: "{{ kube_proxy_cert_group }}"
  with_items:
    - "{{ kube_ca_filename }}"
  when: inventory_hostname in groups['kube-nodes']


# copy kube-proxy cert files from ansible tmp backup directory to work node 
- name: copy ansible tmp backup kube-proxy certs to work node
  copy:
    dest: "{{ kube_proxy_certs_dir }}/{{ item }}"
    src:  "{{ ansible_tmp_kube_proxy_certs_backup_dir }}/{{ item }}"
    owner: "{{ kube_proxy_cert_group }}"
    group: "{{ kube_proxy_cert_group }}"
  with_items:
    - "{{ kube_kube_proxy_cert_filename }}"
    - "{{ kube_kube_proxy_key_filename }}"   
  when: inventory_hostname in groups['kube-nodes']
  

# change owner of ca and cert files on all nodes of etcd cluster 
- name: change and ensure etcd certs permission of certs of each node of kube-nodes
  file:
    path: "{{ item }}"
    state: file
#    owner: {{ kube_proxy_cert_group }}
    owner: root
    mode: 0640
  with_items:
    - "{{ kube_ca_file }}"
    - "{{ kube_kube_proxy_cert_file }}"
    - "{{ kube_kube_proxy_file }}"
  when: inventory_hostname in groups['kube-nodes']

