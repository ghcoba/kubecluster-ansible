---

# file: roles/kube/tasks/gen-kube-certs.yml
# . create tmp kube cert config directory for cert gen  on first node of kube masters
# . create kube cert directory on all all nodes of kube masters
# . copy cert gen shell script
# . run cert gen shell script (: copy master ca/ca-key etc to tmp config directory, gen cert)
# . copy certs generated into ansible tmp storeage
# . copy certs crom ansible tmp storage to all nodes of kube masters
#

# remove tmp kube cert config directory on first node of masters if exist
- name: STARTING gen-kuber-certs TASK. remove tmp kube certs config directory on first node of masters if exist
  file:
    path: "{{ tmp_kube_certs_config_dir }}"
    state: absent
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"

# create tmp config directory for kube cert on first kube master node
- name: crate and ensure tmp kube certs config directory on first node of masters 
  file:
    path: "{{ tmp_kube_certs_config_dir }}"
    state: directory
    force: yes
    mode: 01777
    owner: root
    group: root
    recurse: yes
  register: tmp_kube_certs_config_dir_check
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"


# create kub cert dirctory on all node in kube cluster masters
- name: ensure kube certs directory
  file:
    path: "{{ kube_certs_dir }}"
    state: directory
    force: yes
    owner: root
    group: root
    recurse: yes
  when: inventory_hostname in groups['kube-masters']


# copy make kube cert script to tmp kube config directory on first kub master node   
- name: copy make-kube-cert.sh to first node of kube masters
  copy:
    src: make-kube-cert.sh
    dest: "{{ tmp_kube_certs_config_dir }}"
    owner: root
    group: root
    mode: "0500"
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"
  

# run make script to create cert on tmp kube config directory of first kube master node
# (rem: script need copy master ca/ca-key from MASTER_CA_DIR to tmp kube cert config directory first,
#       as kube and etcd will use a common ca/ca-key to generate other certs)
- name: gen certs on the first master server node - certs generate are admin, apiserver, controller-manager, scheduler certs
  command:
    "{{ tmp_kube_certs_config_dir }}/make-kube-cert.sh"
  args:
    creates: "{{ tmp_kube_certs_config_dir }}/server.crt"
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"
  environment:
    NODE_IPS: "{% for host in groups['kube-masters'] %}{{ hostvars[host]['kube_masters_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
    NODE_DNS: "{{ groups['kube-masters']|join(',') }}"
    CERT_DIR: "{{ tmp_kube_certs_config_dir }}"
    MASTER_CA_DIR: "{{ tmp_master_ca_config_dir }}"
    CERT_GROUP: "{{ kube_cert_group }}"
    LOAD_BALANCER_IP: "{% for host in groups['load-balancer'] %}{{ hostvars[host]['load_balancer_machine_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
    APISERVER_SERVICE_CLUSTER_IP: "{{ apiserver_service_cluster_ip }}"

#- name: check cert backup dir exist
#  stat: 
#    path="{{ etcd_certs_dir }}/backup_certs/"
#  register: cert_backup_dir_check
#  run_once: true
#  delegate_to: "{{ groups['etcd-nodes'][0] }}"


# backup cert files from tmp kube cert config directory to ansible tmp cert backup directory
# (cert, csr and json files)
- name: fetch backuped kube cert files from the first master server node to ansible tmp directory
  fetch:
    src: "{{ tmp_kube_certs_config_dir }}/{{ item }}"
    dest: "{{ ansible_tmp_kube_certs_backup_dir }}/{{ item }}"
    flat: yes
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"
  with_items:
    - "{{ kube_ca_filename }}"
    - "{{ kube_ca_key_filename }}"
    - "{{ kube_ca_config_json_filename }}"
    - "{{ kube_ca_csr_json_filename }}"
    - "{{ kube_ca_csr_filename }}"
    - "{{ kube_apiserver_cert_filename }}"
    - "{{ kube_apiserver_key_filename }}"
    - "{{ kube_apiserver_json_filename }}"
    - "{{ kube_apiserver_csr_filename }}"
    - "{{ kube_admin_cert_filename }}"
    - "{{ kube_admin_key_filename }}"
    - "{{ kube_admin_json_filename }}"
    - "{{ kube_admin_csr_filename }}"
    - "{{ kube_controller_manager_cert_filename }}"
    - "{{ kube_controller_manager_key_filename }}"
    - "{{ kube_controller_manager_json_filename }}"
    - "{{ kube_controller_manager_csr_filename }}"
    - "{{ kube_scheduler_cert_filename }}"
    - "{{ kube_scheduler_key_filename }}"
    - "{{ kube_scheduler_json_filename }}"
    - "{{ kube_scheduler_csr_filename }}"
  when: tmp_kube_certs_config_dir_check


# copy kube ca and cert files from ansible tmp backup directory to all master nodes of kube cluster 
- name: copy ansible tmp backup certs to all kube master server nodes
  copy:
    dest: "{{ kube_certs_dir }}/{{ item }}"
    src:  "{{ ansible_tmp_kube_certs_backup_dir }}/{{ item }}"
    owner: "{{ kube_user }}"
    group: "{{ kube_cert_group }}"
  with_items:
    - "{{ kube_ca_filename }}"
    - "{{ kube_ca_key_filename }}"
    - "{{ kube_apiserver_cert_filename }}"
    - "{{ kube_apiserver_key_filename }}"
    - "{{ kube_admin_cert_filename }}"
    - "{{ kube_admin_key_filename }}"
    - "{{ kube_controller_manager_cert_filename }}"
    - "{{ kube_controller_manager_key_filename }}"
    - "{{ kube_scheduler_cert_filename }}"
    - "{{ kube_scheduler_key_filename }}"   
  when: inventory_hostname in groups['kube-masters']
  

# change owner of ca and cert files on all nodes of etcd cluster 
- name: change and ensure etcd certs permission of certs of each node of kube masters
  file:
    path: "{{ item }}"
    state: file
    owner: root
    mode: 0640
  with_items:
    - "{{ kube_ca_file }}"
    - "{{ kube_ca_key_file }}"
    - "{{ kube_apiserver_cert_file }}"
    - "{{ kube_apiserver_key_file }}"
    - "{{ kube_admin_cert_file }}"
    - "{{ kube_admin_key_file }}"
    - "{{ kube_controller_manager_cert_file }}"
    - "{{ kube_controller_manager_key_file }}"
    - "{{ kube_scheduler_cert_file }}"
    - "{{ kube_scheduler_key_file }}"
  when: inventory_hostname in groups['kube-masters']
