---

# file: roles/kube/tasks/gen-kube-config.yml
# generate kube config file (set cluster, credential, context, and default context)
# copy to ansible backup
# copy to kub home dire

# generate kube config file for every master node
- name: generate kub config - set cluster
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config set-cluster kubernetes
#      --certificate-authority="{{ kube_ca_file }}" 
#      --embed-certs=true 
#      --server="{{ kube_load_balancer_apiserver_url }}"
#      --kubeconfig=admin.conf
  command: "/usr/local/bin/kubectl {{ arg_str_cluster }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-masters']

- name: generate kube config - set credential
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config set-credentials kubernetes-admin 
#      --client-certificate="{{ kube_admin_cert_file }}"
#      --embed-certs=true 
#      --client-key="{{ kube_admin_key_file }}" 
#      --kubeconfig=admin.conf
  command: "/usr/local/bin/kubectl  {{ arg_str_credentials }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-masters']

- name: generate kube config - set context
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config set-context kubernetes-admin@kubernetes
#      --cluster=kubernetes
#      --user=kubernetes-admin
#      --kubeconfig=admin.conf
  command: "/usr/local/bin/kubectl  {{ arg_str_context }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-masters']

- name: generate kube config - set default context
#  command: >
#    "{{ kube_bin_dir }}"/kubectl config use-context kubernetes-admin@kubernetes 
#      --kubeconfig=admin.conf
  command: "/usr/local/bin/kubectl  {{ arg_str_defaultcontext }}"
  args:
    chdir: "{{ kube_conf_dir }}/"
  when: inventory_hostname in groups['kube-masters']


- name: cp kube config to home
  command: cp /etc/kubernetes/admin.conf "{{ kube_home_dir }}/config"
#  args:
  when: inventory_hostname in groups['kube-masters']

