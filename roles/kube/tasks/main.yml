---

######     CREATE USER AND DIRECTORIES

# create etcd user and data dir
- name: STARTING role - kube - main TASK.    create etcd user and data dir
  import_tasks: create-etcd-user.yml

# create kube user and dir
- name: ROLE kube TASK main sub create-kube-user TASK
  import_tasks: create-kube-user.yml

# create kubelet user and dir
- name: ROLE kube TASK main sub create-kubelet-user TASK
  import_tasks: create-kubelet-user.yml

# create kube-proxy user and dir
- name: ROLE kube TASK main sub create-kube-proxy-user TASK
  import_tasks: create-kube-proxy-user.yml


#######     CREATE CERTS FOR ETCD, ADMIN, APISERVER, CONTROLLER-MANAGER, SCHEDULER for MASTER NODE

##### create ca/cert for etcd and kube masters
#          (kube admin, apiserver, controller-manager, scheduler certs)

# generate master ca/cert  
- name: ROLE kube TASK main sub gen-maskter-ca-certs TASK.  generate master ca/cert
  import_tasks: gen-master-ca-certs.yml

# generate etcd certs (server, client, peer cert)
- name: ROLE kube TASK main sub gen-etcd-certs TASK.   generate etcd certs
  import_tasks: gen-etcd-certs.yml

# generate kubernetes certs (admin, apiserver, controller-manager, scheduler)
- name: ROLE kube TASK main sub gen-kube-certs TASK.   gen kube certs
  import_tasks: gen-kube-certs.yml


#######     CREATE CERTS FOR KUBELET, KUBE-PROXY ON NODES

####  create cert for kubelet, kube-proxy on kube-nodes

# create kublet and kube-proxy user and data directory
- name: ROLE kube TASK main sub create-kubelet-user TASK.  make kublet user and data dir
  import_tasks: create-kubelet-user.yml

- name: ROLE kube TASK main sub create-kube-proxy-user TASK. make kube-proxy user and data dir
  import_tasks: create-kube-proxy-user.yml

# generate kubelet cert
- name: ROLE kube TASK main sub gen-kubelet-certs TASK. generate kubelet cert
  import_tasks: gen-kubelet-certs.yml

# generate kube-proxy cert
- name: ROLE kube TASK main sub gen-kube-proxy-certs TASK. generate kube-proxy cert
  import_tasks: gen-kube-proxy-certs.yml



######      DEPLOY ETCD CLUSTER

# install binary on etcd nodes

# download and install etcd binary files
- name: ROLE kube TASK main sub install-etcd-bin TASK.  download and install etcd bin
  import_tasks: install-etcd-bin.yml
  when: ansible_use_local_package != true

# copy local bin to install etcd binary files
- name: ROLE kube TASK main sub install-etcd-bin-using-local-bin TASK.  copy from local bin and install etcd bin
  import_tasks: install-etcd-bin-using-local-bin.yml
  when: ansible_use_local_package == true


# config service for etcd nodes 

- name: ROLE kube task main sub gen-etcd-systemd TASK.  generate etcd systemd and config
  import_tasks: gen-etcd-systemd.yml

# it will append environment setting to /root/.bash_profile (not check repeat appending)
- name: create environment setting for etcdctl
  import_tasks: create-etcdctl-env.yml

# config single node time sync source for cluster 
# setup single node time sync source for etcd cluster
- name: ROLE kube task main sub change-ntp-config TASK.  change ntp config to single time src and restart ntp
  import_tasks: change-ntp-config.yml

# change firewall and port setting for etcd and ntp
- name: ROLE kube task main sub change-firewall-config TASK.  change firewall config to enable port 2370 2380 ntp and reload rules
  import_tasks: change-firewall-config.yml


# start etcd service  

- name: ROLE kube task main sub etcd-start TASK.  start etcd
  import_tasks: etcd-start.yml

# restart etcd cluster to make all configuration take effect  
- name: ROLE kube task main sub etcd-restart TASK.   restart etcd
  import_tasks: etcd-restart.yml



#######  DEPLOY FLANNEL NETWORK ON KUBE-NODES and KUBE-MASTERS

# create flannel config key on etcd
#  ######### -> we make it ansible playbook tasks (in playbook dep-kube.yml) which will run
#   after etcd and flannel installation finished. 
# (we can not make it works in a roles task as at this place)

#- name: create flannel config key on etcd
#  import_tasks: create-flannel-key-on-etcd.yml
#  import_tasks: create-flannel-subnet-key.yml
- name: create flannel subnet json
  import_tasks: create-flannel-subnet-json.yml

# install flannel binary
- name: install flannel binary using remove
  import_tasks: install-flannel.yml
  when: ansible_use_local_package != true
- name: install flannel binary using local binary
  import_tasks: install-flannel-using-local-bin.yml
  when: ansible_use_local_package == true

# generate flannel service systemd unit file
- name: generate flannel service systemd unit file
  import_tasks: gen-flannel-systemd.yml

# start flannel service
- name: start flannel service
  import_tasks: flannel-start.yml

# start/restart flannel service
- name: restart flannel service
  import_tasks: flannel-restart.yml



####### INSTALL DOCKER ON KUBE-NODES (deploy on kube-masters alos, but not use now )

# install docker binary on docker nodes

# install docker binary using remote download or using local package
- name: ROLE kube task main sub install-docker-bin
  import_tasks: install-docker-bin.yml

# generate docker service systemd unit file to get flannel network integration
- name: generate docker systemd unit file with flannel network integration
  import_tasks: gen-docker-systemd.yml

# flannel service must already started ( docker requires flannel network )
- name: ROLE kube task main sub docker-restart
  import_tasks: docker-restart.yml



########   DEPLOY KEBERNETES ON MASTER NODES

# download or copy kubernetes binary files

# download and install kubernetes binary files
- name: ROLE kube TASK main sub install-kubernetes-bin TASK.  download and install kub$
  import_tasks: install-kubernetes-bin.yml
  when: ansible_use_local_package != true


# restart docker service before kubelet
- name: ROLE kube task main sub docker-restart
  import_tasks: docker-restart.yml



# copy local binary and install kubernetes binary files
- name: ROLE kube TASK main sub install-kubernetes-bin-using-local-bin TASK.  copy local bin to install kub$
  import_tasks: install-kubernetes-bin-using-local-bin.yml
  when: ansible_use_local_package == true

# config kubernetes cluster service

- name: ROLE kube task main sub gen-kube-systemd TASK.  generate kube systemd and config
  import_tasks: gen-kube-systemd.yml


# generate config for  kube-apiserver, kube-controller-manager, kube-scheduler service

# attention: controller-manager and scheduler service is set to NEED these config settings
# we MUST (run) generated before starting those services

# gen kube-apiserver config and copy to kube home HOME/.kube
- name: ROLE kube task main sub apiserver gen-kube-config
  import_tasks: gen-kube-config.yml

# gen kube controller-manager config
- name: ROLE kube task main sub gen-controller-manager-config
  import_tasks: gen-controller-manager-config.yml

# gen kube scheduler config
- name: ROLE kube task main sub gen-scheduler-config
  import_tasks: gen-scheduler-config.yml


# start kube services
# must generate config files (controller-manager and scheduler config) before starting services
- name: ROLE kube task main sub kube-start TASK.  start kube services
  import_tasks: kube-start.yml

# restart kubernetes cluster to make all configuration take effect
- name: ROLE kube task main sub kube-restart TASK.   restart kube services
  import_tasks: kube-restart.yml



############################### DEPLOY KUBE-NODES


# install cni network addon for kubernetes on all cluste nodes

# instal using remote package - when option is not ansible_use_local_package
- name: ROLE kube task main sub install-cni
  import_tasks: install-cni.yml
  when: ansible_use_local_package != true 
# install using local package - when option is ansible_use_local_package
- name: ROLE kube task main sub install-cni-using-local-bin
  import_tasks: install-cni-using-local-bin.yml
  when: ansible_use_local_package == true


# generate system service file for kubelet and kube-proxy service on kube-nodes

- name: ROLE gen-kube-nodes-systemd service file 
  import_tasks: gen-kube-nodes-systemd.yml


# generated service config file for kublet and kube-proxy service

- name: ROLE gen-kubelet-config 
  import_tasks: gen-kubelet-config.yml

- name: ROLES gen-kube-proxy-config
  import_tasks: gen-kube-proxy-config.yml


# start/restart service (kubelet, kube-proxy)

#- name: ROLE kube-nodes-start  - start services on kube-nodes
#  import_tasks: kube-nodes-start.yml

- name: ROLE kube-nodes-restart - restart services on kube-nodes
  import_tasks: kube-nodes-restart.yml



################################## POST PROC

- name: post process - ROLE kube task main sub remove-tmp-config-dirs-of-masters
  import_tasks: remove-tmp-config-dirs-of-masters.yml

- name: post process - ROLE kube task main sub remove-tmp-config-dirs-of-nodes
  import_tasks: remove-tmp-config-dirs-of-nodes.yml


