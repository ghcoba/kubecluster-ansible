#!/bin/bash

# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

# Export proxy to ensure commands like curl could work
[[ -n "${HTTP_PROXY:-}" ]]  && export HTTP_PROXY=${HTTP_PROXY}
[[ -n "${HTTPS_PROXY:-}" ]] && export HTTPS_PROXY=${HTTPS_PROXY}

# Caller should set in the env:
# NODE_IPS - IPs of all etcd servers
# NODE_DNS - DNS names of all etcd servers
# ARCH - what arch of cfssl should be downloaded

# Also the following will be respected
# CERT_DIR - where to place the finished certs
# CERT_GROUP - who the group owner of the cert files should be
# MASTER_CA_DIR - tmp master ca file directory. copy master ca files from this directory

node_ips="${NODE_IPS:="${1}"}"
node_dns="${NODE_DNS:=""}"
arch="${ARCH:-"linux-amd64"}"
cert_dir="${CERT_DIR:-"/srv/kubernetes"}"
cert_group="${CERT_GROUP:="etcd"}"
master_ca_dir="${MASTER_CA_DIR:-"/etc/tmp_master_ca_config"}"

# The following certificate pairs are created:
#
#  - ca (the cluster's certificate authority)
#  - server (for etcd access)
#  - client (for kube-apiserver, etcdctl)
#  - peer (for etcd peer to peer communication)

tmpdir=$(mktemp -d --tmpdir etcd_cacert.XXXXXX)
trap 'rm -rf "${tmpdir}"' EXIT
cd "${tmpdir}"

declare -a san_array=()

IFS=',' read -ra node_ips <<< "$node_ips"
for ip in "${node_ips[@]}"; do
    san_array+=(${ip})
done
IFS=',' read -ra node_dns <<< "$node_dns"
for dns in "${node_dns[@]}"; do
    san_array+=(${dns})
done

mkdir -p bin

# download cfssl, cfssljson utility
#curl -sSL -o ./bin/cfssl "https://pkg.cfssl.org/R1.2/cfssl_$arch"
#curl -sSL -o ./bin/cfssljson "https://pkg.cfssl.org/R1.2/cfssljson_$arch"

# copy cfssl, cfssljson utility from master ca config directory
cp -p "${master_ca_dir}/cfssl" ./bin/cfssl
cp -p "${master_ca_dir}/cfssljson" ./bin/cfssljson

chmod +x ./bin/cfssl{,json}
export PATH="$PATH:${tmpdir}/bin/"

# copy master ca files from tmp master ca config directory
cp -p "${master_ca_dir}/ca.pem" ./ca.pem
cp -p "${master_ca_dir}/ca-key.pem" ./ca-key.pem
cp -p "${master_ca_dir}/ca-config.json" ./ca-config.json
cp -p "${master_ca_dir}/ca-csr.json" ./ca-csr.json
cp -p "${master_ca_dir}/ca.csr" ./ca.csr


####    generate certs

cn_name="${san_array[0]}"
san_array=("${san_array[@]}")
set -- ${san_array[*]}
for arg do shift
    set -- "$@" \",\" "$arg"
done; shift
hosts_string="\"$(printf %s "$@")\""

####    generate etcd server json
cat <<EOF > etcd-server.json
{
    "CN": "$cn_name",
    "hosts": [
        "127.0.0.1",
        "::1",
        "::",
        $hosts_string
    ],
    "key": {
        "algo": "rsa",
        "size": 2048
    },
    "names": [
        {
            "O": "autogenerated",
            "OU": "etcd cluster",
            "L": "internet"
        }
    ]
}
EOF

#mkdir -p "${cert_dir}"
#ls -al ./* > "${cert_dir}/files1.txt"
#cat ./etcd-server.json > "${cert_dir}/etcd-server.json"
#cat ./ca-csr.json > "${cert_dir}/ca-csr.json"
#cp ./bin/cf* "${cert_dir}/"

if ! (cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server etcd-server.json | cfssljson -bare etcd-server) >/dev/null 2>&1; then
    echo "=== Failed to generate server certificates: Aborting ===" 1>&2
    exit 2
fi


####  etcd-client json file
cat <<EOF > etcd-client.json
{
    "CN": "$cn_name",
    "hosts": [""],
    "key": {
        "algo": "rsa",
        "size": 2048
    },
    "names": [
        {
            "O": "autogenerated",
            "OU": "etcd cluster",
            "L": "the internet"
        }
    ]
}
EOF

# debug
#ls -al ./* > "${cert_dir}/files2.txt"
#cat ./etcd-client.json > "${cert_dir}/etcd-client.json"
#cat ./ca-csr.json > "${cert_dir}/ca-csr.json"

if ! (cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client etcd-client.json | cfssljson -bare etcd-client) >/dev/null 2>&1; then
    echo "=== Failed to generate client certificates: Aborting ===" 1>&2
    exit 2
fi

####    etcd peer json
cat <<EOF > etcd-peer.json
{
    "CN": "$cn_name",
    "hosts": [
        "127.0.0.1",
        "::1",
        "::",
        $hosts_string
    ],
    "key": {
        "algo": "rsa",
        "size": 2048
    },
    "names": [
        {
            "O": "autogenerated",
            "OU": "etcd cluster",
            "L": "the internet"
        }
    ]
}
EOF

# debug
#ls -al ./* > "${cert_dir}/files3.txt"
#cat ./etcd-peer.json > "${cert_dir}/etcd-peer.json"
#cat ./ca-csr.json > "${cert_dir}/ca-csr.json"

if ! (cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-peer.json | cfssljson -bare etcd-peer) >/dev/null 2>&1; then
    echo "=== Failed to generate peer certificates: Aborting ===" 1>&2
    exit 2
fi

mkdir -p "$cert_dir"

tempdir_cert_backup="${cert_dir}"
mkdir -p "$tempdir_cert_backup"

ls -al ./* > "${cert_dir}/files.txt"

cp -p ./ca-config.json "${tempdir_cert_backup}/ca-config.json"
cp -p ./ca-csr.json "${tempdir_cert_backup}/ca-csr.json"
cp -p ./ca.csr "${tempdir_cert_backup}/ca.csr"
cp -p ./ca-key.pem "${tempdir_cert_backup}/ca-key.pem"
cp -p ./ca.pem "${tempdir_cert_backup}/ca.pem"

cp -p ./ca-config.json "${tempdir_cert_backup}/etcd-ca-config.json"
cp -p ./ca-csr.json "${tempdir_cert_backup}/etcd-ca-csr.json"
cp -p ./ca.csr "${tempdir_cert_backup}/etcd-ca.csr"
cp -p ./ca-key.pem "${tempdir_cert_backup}/etcd-ca-key.pem"
cp -p ./ca.pem "${tempdir_cert_backup}/etcd-ca.pem"

cp -p ./etcd-client.csr "${tempdir_cert_backup}/etcd-client.csr"
cp -p ./etcd-client.json "${tempdir_cert_backup}/etcd-client.json"
cp -p ./etcd-client-key.pem "${tempdir_cert_backup}/etcd-client-key.pem"
cp -p ./etcd-client.pem "${tempdir_cert_backup}/etcd-client.pem"

cp -p ./etcd-peer.csr "${tempdir_cert_backup}/etcd-peer.csr"
cp -p ./etcd-peer.json "${tempdir_cert_backup}/etcd-peer.json"
cp -p ./etcd-peer-key.pem "${tempdir_cert_backup}/etcd-peer-key.pem"
cp -p ./etcd-peer.pem "${tempdir_cert_backup}/etcd-peer.pem"

cp -p ./etcd-server.csr "${tempdir_cert_backup}/etcd-server.csr"
cp -p ./etcd-server.json "${tempdir_cert_backup}/etcd-server.json"
cp -p ./etcd-server-key.pem "${tempdir_cert_backup}/etcd-server-key.pem"
cp -p ./etcd-server.pem "${tempdir_cert_backup}/etcd-server.pem"

cp -p ./bin/cfssl "${tempdir_cert_backup}/cfssl"
cp -p ./bin/cfssljson "${tempdir_cert_backup}/cfssljson"


#cp -p ca.pem "${cert_dir}/ca.crt"
#cp -p server.pem "${cert_dir}/server.crt"
#cp -p server-key.pem "${cert_dir}/server.key"
#cp -p client.pem "${cert_dir}/client.crt"
#cp -p client-key.pem "${cert_dir}/client.key"
#cp -p peer.pem "${cert_dir}/peer.crt"
#cp -p peer-key.pem "${cert_dir}/peer.key"

#CERTS=("ca.crt" "server.crt" "server.key" "client.crt" "client.key" "peer.crt" "peer.key")
#for cert in "${CERTS[@]}"; do
#  chgrp "${cert_group}" "${cert_dir}/${cert}"
#  chmod 660 "${cert_dir}/${cert}"
#done
